"
"  Doug's VIM initialization file
"

" Vundle setup and load plugins
"   https://github.com/gmarik/Vundle.vim
set nocompatible        " don't try to be compatible with vi
filetype off

set rtp+=~/.vim/bundle/Vundle.vim/
set rtp+=/usr/local/opt/fzf
call vundle#begin()

" Core plugins
Plugin 'VundleVim/Vundle.vim'       " package management
" Plugin 'jlanzarotta/bufexplorer'    " better buffer list

" Main plugins
Plugin 'dense-analysis/ale'                 " async syntax checking, plus other stuff
Plugin 'prabirshrestha/asyncomplete.vim'    " async completion
Plugin 'OmniSharp/omnisharp-vim'            " C#
Plugin 'tpope/vim-vinegar'                  " enhancements to netrw
Plugin 'tpope/vim-surround'                 " surround things
Plugin 'tpope/vim-repeat'                   " enable repeat (.) in surround, etc.
" Plugin 'inkarkat/vim-ReplaceWithRegister'   " adds [count]["x]gr{motion}

" Experimental
Plugin 'junegunn/fzf.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'chr4/nginx.vim'
Plugin 'Glench/Vim-Jinja2-Syntax'

" Plugin 'vimwiki/vimwiki'                    " wiki!
Plugin 'tyru/open-browser.vim'
Plugin 'suan/vim-instant-markdown', {'rtp': 'after'}

" Plugin 'HerringtonDarkholme/yats.vim'       " Typescript syntax highlighting
" Plugin 'tpope/vim-commentary'               " support for commenting things out
" Plugin 'davidhalter/jedi-vim'               " Python code completion, via Jedi


call vundle#end()            " required
filetype plugin indent on    " required

syntax on               " syntax coloring is very cool...turn it on...
" syntax sync fromstart
" colorscheme default   " comments too light on WSL
" colorscheme slate     " highlight in quickfix unreadable
colorscheme elflord

set autoindent          " always set autoindenting on
set expandtab           " spaces instead of tabs
set hidden              " keep hidden buffers
set incsearch           " show search progress
set laststatus=2        " always show a status line
" set makeprg=xbuild      " doing mono development by default
set ruler               " show line,column in status line
set scrolloff=1         " keep a couple of lines above/below cursor
set shiftround          " round indent when using > and <
set shiftwidth=4        " when indenting, use 4 spaces
set shortmess=a         " abbreviate messages to get rid of [hit return] prompts
set showcmd             " show partial commands in status line
set tabstop=4           " work like the rest of marketwatch
set viminfo='50,/10     " save last ten find commands in viminfo file
set visualbell          " flash screen instead of beeping
set nowrap              " don't wrap lines
set wrapscan            " wrap searches around end of file
" set wildmenu

" set t_BE=               " disable bracketed paste in iterm2

set number              " show line numbers
set relativenumber      " ...and make 'em relative

set statusline =
" Buffer number
set statusline +=[%n] 
" File description
set statusline +=\ %f\ %h%m%r%w
" Name of the current branch (needs fugitive.vim)
" set statusline +=\ %{fugitive#statusline()}
" Date of the last time the file was saved
" set statusline +=\ %{strftime(\"[%d/%m/%y\ %T]\",getftime(expand(\"%:p\")))} 
" Total number of lines in the file
set statusline +=%=%-10L
" Line, column and percentage
set statusline +=%=%-14.(%l,%c%V%)
" Filetype
set statusline +=\ %y

" Enable folding
" set foldmethod=indent
set foldlevel=99

" get the gx command working to open URLs - see https://www.reddit.com/r/vim/comments/7j9znw/gx_failing_to_open_url_on_vim8/
let g:netrw_browsex_viewer="open"

" file type: .sh
augroup filetype_sh
    autocmd!
    " set up tabs
    autocmd FileType sh setlocal shiftwidth=2 tabstop=2
augroup end

" file type: .tf
augroup filetype_terraform
    autocmd!
    " set up tabs
    autocmd FileType terraform setlocal shiftwidth=4 tabstop=4
augroup end

" file type: .json
augroup filetype_json
    autocmd!
    autocmd FileType json setlocal foldmethod=syntax foldlevel=20
augroup end

" file type: .yaml
augroup filetype_yaml
    autocmd!
    autocmd FileType yaml setlocal foldmethod=indent foldlevel=20
augroup end

" file type: .cs
augroup filetype_cs
    autocmd!
    autocmd FileType cs let &l:makeprg = 'dotnet build /nologo /v:q /property:GenerateFullPaths=true /clp:NoSummary .'
    autocmd FileType cs let &l:errorformat = ' %#%f(%l\,%c): %m'
augroup end

" file type: .pro
augroup filetype_pro
    autocmd!
    autocmd BufNewFile,BufRead *.pro set filetype=prolog
augroup end

" file type: ALL
augroup filetype_all
    autocmd!
    " do not automatically add comments to new lines
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup end

set tags=./tags;/		" look in current and all parent directories for tags file

let mapleader=","

" - - - - BufExplorer Setup
let g:bufExplorerDisableDefaultKeyMapping=1
" nnoremap <leader>b :BufExplorerHorizontalSplit<CR>


" - - - - netrw setup (built-in file browser)

" Hide all dot files, use gh to toggle
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'


" - - - - omnisharp setup

" Use the stdio OmniSharp-roslyn server
let g:OmniSharp_server_stdio = 1

augroup omnisharp_commands
    autocmd!

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    " Finds members in the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

    " Display the type name/documentation/signature of symbol under the cursor
    autocmd FileType cs nnoremap <buffer> <Leader>ft :OmniSharpTypeLookup<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fd :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fg :OmniSharpSignatureHelp<CR>

    " Fuzzy-search thru code actions
    autocmd FileType cs nnoremap <buffer> <Leader>ff :OmniSharpGetCodeActions<CR>

    " Populate quickfix with all code issues in solution
    autocmd FileType cs nnoremap <buffer> <Leader>fb :OmniSharpGlobalCodeCheck<CR>

    " Navigate between methods/classes
    autocmd FileType cs nnoremap <buffer> <Leader>f<Up> :OmniSharpNavigateUp<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>f<Down> :OmniSharpNavigateDown<CR>

    " Fix usings
    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
augroup END


" - - - - asynccomplete setup

" Completion mappings
" These two are handy, but slow for some reason. Get used to C-n and C-p
" inoremap <expr> j     pumvisible() ? "\<C-n>" : "j"
" inoremap <expr> k     pumvisible() ? "\<C-p>" : "k"
inoremap <expr> <cr>  pumvisible() ? "\<C-y>" : "\<cr>"
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"

" Don't pop up the popup until asked
let g:asyncomplete_auto_popup = 0

function! s:check_back_space() abort
    let col = col('.') - 1
    " TODO - change this so it only expands if we're tabbing after a dot
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Set colors (not really part of the plugin, but used for completion)
highlight Pmenu ctermbg=White ctermfg=Gray
highlight PmenuSel ctermbg=DarkRed ctermfg=White


" - - - - ALE setup

nnoremap <silent> <leader>ad :ALEDisableBuffer<cr>
nnoremap <silent> <leader>ae :ALEEnableBuffer<cr>
nmap <silent> <leader>an <Plug>(ale_next_wrap)
nmap <silent> <leader>ap <Plug>(ale_previous_wrap)

" Use quickfix instead of loclist
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

highlight ALEError ctermbg=none cterm=underline
highlight ALEWarning ctermbg=none cterm=underline
highlight ALEInfo ctermbg=none cterm=underline


" - - - - open-browser.vim setup

let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)


" - - - - fzf setup

nnoremap <leader>o :Files<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>m :Marks<cr>


" - - - - personal wiki setup

" let g:vimwiki_list = [{'path': '~/git/mywiki/',
"                       \ 'syntax': 'markdown', 'ext': '.md'}]

" nnoremap <leader>wd :VimwikiMakeDiaryNote<cr>       " overwrites default 'delete'

nnoremap <leader>wp :InstantMarkdownPreview<cr>
nnoremap <leader>wd :edit ~/git/mywiki/diary/index.md<cr>
nnoremap <leader>wi :edit ~/git/mywiki/index.md<cr>
nnoremap <leader>wf :Files ~/git/mywiki/<CR>

command! -bang -nargs=* Wg 
   \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>)." ~/git/mywiki",
   \                   1,
   \                   <bang>0)


" - - - - vim-instant-markdown setup

let g:instant_markdown_autostart = 0    " don't preview until we ask for it
" let g:instant_markdown_python = 1       " use smdv for preview (pip install smdv)

" - - - - Custom Mappings
nnoremap <leader>e :Explore<cr>

nnoremap <leader>ve :edit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

nnoremap <leader>qc :cclose<cr>
nnoremap <leader>qf :cfirst<cr>
nnoremap <leader>ql :clast<cr>
nnoremap <leader>qn :cnext<cr>
nnoremap <leader>qo :copen<cr>
nnoremap <leader>qp :cprev<cr>

nnoremap <leader>lc :lclose<cr>
nnoremap <leader>lf :lfirst<cr>
nnoremap <leader>ll :llast<cr>
nnoremap <leader>ln :lnext<cr>
nnoremap <leader>lo :lopen<cr>
nnoremap <leader>lp :lprev<cr>

" Close the quickfix window when item is selected
:autocmd FileType qf nnoremap <buffer> <CR> <CR>:cclose<CR>

" Map auto-complete to ctrl-space: https://stackoverflow.com/q/7722177
" inoremap <C-@> <c-x><c-o>

" Add current date, in dd-MMM-yyyy format
nnoremap <leader>id "=strftime("%d-%b-%Y")<CR>P
nnoremap <leader>iD "=strftime("%Y-%m-%d")<CR>P

" Remap jk to esc in insert mode and disable esc to force usage
inoremap jk <esc>
" inoremap <esc> <nop>

