"
"  Doug's newer VIM initialization file
"

" ======= PLUGINS ======= {{{1

" Plugins are managed using the vim-plug plugin.
" Specify the directory where plugins will be installed.
call plug#begin('~/.vim/plugged')

" Use the latest fzf plugin from github, prompting to install fzf if not
" already installed. This provides the basic FZF command.
" Also set up the fzf-vim plugin, which uses fzf to browse things like buffers.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } | Plug 'junegunn/fzf.vim'

" Enhancements to netrw
Plug 'tpope/vim-vinegar'

" Work with git while inside vim
Plug 'tpope/vim-fugitive'

" Comment things out using gcc and gc
Plug 'tpope/vim-commentary'

" The airline plugin provides pretty status lines. I tried it, but had issues,
" so uninstalled it. I don't recall why, so lets try it again.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Intellisense, via language server protocol
let s:coc_installed = 0     " can't use the coc plugin's flag, as that won't be loaded yet
if has('mac')
    " Plug 'neoclide/coc.nvim', {'branch': 'release'}   " released version
    " Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}      " build from source
    " let s:coc_installed = 1
endif

" Intellisense, via language server protocol
" Seems promising, but unable to get diagnostics to work in C# or Python
let s:lsp_installed = 0
if has('mac')
    " Plug 'prabirshrestha/async.vim'
    " Plug 'prabirshrestha/vim-lsp'
    " Plug '/Users/swisherd/git/vim-lsp'
    " Plug 'mattn/vim-lsp-settings'
    " let s:lsp_installed = 1
endif

" Install ALE, as it constantly runs the file through lint and shows errors in
" realtime. With CoC, it only checks on file save/load.
if ! s:lsp_installed
    Plug 'dense-analysis/ale'
endif

" Integration with omnisharp for C# development
"   - coc also integrates with omnisharp, but not quite as well
"   - vim-lsp has similar issues with omnisharp (no diagnostics)
if has('mac') && ! s:lsp_installed
    Plug 'OmniSharp/omnisharp-vim'
endif

" An alternative to CoC for completion.
if has('mac')
    Plug 'prabirshrestha/asyncomplete.vim'

    if s:lsp_installed
        Plug 'prabirshrestha/asyncomplete-lsp.vim'
    endif
endif

" A collection of language packs for Vim. Improves syntax and indentation support.
Plug 'sheerun/vim-polyglot'

" Python folding support
Plug 'tmhedberg/SimpylFold'

" Viewer & Finder for LSP symbols and tags
if s:coc_installed
    Plug 'liuchengxu/vista.vim'
endif

" Initialize plugin system
call plug#end()


" ======= OPTIONS ======= {{{1

" I prefer comma as the leader, as opposed to the default \
let mapleader=","
let maplocalleader = ','

" Now that we have a bit more confidence in our runtime environment, set up
" all of the filetype detection, plugin, and indent hooks.
filetype plugin indent on

" Misc settings
" set autoindent          " always set autoindenting on
set cmdheight=2         " recommended by coc, give more space for displaying messages
set directory=~/.vim/swapfiles//    " put all .swp files in one place
set expandtab           " spaces instead of tabs
set foldlevel=99        " start with all folds open
set hidden              " allow buffers with changes to be unlinked from a window
set nohlsearch          " do not highlight all search matches; enabled by default on some instances
set incsearch           " show search progress
" set laststatus=2        " always show a status line
set number              " show line numbers
set relativenumber      " use relative numbers
" set ruler               " show line,column in status line
set scrolloff=2         " keep a couple of lines above/below cursor
set shiftround          " round indent when using > and <
set shiftwidth=0        " when indenting, use one tabstop
" set showcmd             " show partial commands in status line
" set signcolumn=yes      " recommended by coc, always show the sign column for diagnostics
set tabstop=4           " for almost all file types, use 4 spaces
set updatetime=300      " recommended by coc, default of 4000 leads to delays
" set wildmenu
set nowrap              " don't wrap lines
" set wrapscan            " wrap searches around end of file

" file type: ALL
augroup filetype_all
    autocmd!
    " do not automatically add comments to new lines
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup end

" vim: set fdm=marker fdl=1 :
