
# Based on https://dougblack.io/words/zsh-vi-mode.html
# and http://zanshin.net/2013/02/02/zsh-configuration-from-the-ground-up/

# Set up history file
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

setopt hist_ignore_dups # Do not write events to history that are duplicates of previous events

# Set vi command-line editing mode
bindkey -v

# Have info use vi key bindings; an alias seems to be the only way
alias info='info --vi-keys'

# Enable highlighting in less
alias less='less -R'

# clear LSCOLORS
unset LSCOLORS

# make directories more visible on a dark background
export CLICOLOR=1
export LSCOLORS=Gxfxcxdxbxegedabagacad

# use vim whenever possible
if [ -f /usr/local/bin/vim ]; then
    export EDITOR=/usr/local/bin/vim
else
    export EDITOR=/usr/bin/vim
fi
export VISUAL="$EDITOR"
export GIT_EDITOR="$EDITOR"

# make sure we use vim
alias vi=$EDITOR

# ripgrep config
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# Homebrew tweaks (Mac only)
if [ -f /usr/local/bin/brew ]; then
    # Only update once per day
    export HOMEBREW_AUTO_UPDATE_SECS=86400
elif [ -f /opt/homebrew/bin/brew ]; then
    # Add to path
    export PATH="$PATH:/opt/homebrew/bin"
    # Only update once per day
    export HOMEBREW_AUTO_UPDATE_SECS=86400
fi

# my virtualenv wrapper
# if [ -f $HOME/git/dothome/myvirtualenv.sh ]; then
#     export VENV_DIR=~/VirtualEnvs
#     source $HOME/git/dothome/myvirtualenv.sh
# fi

# Put local bin in path
export PATH="$PATH:$HOME/bin"

# FZF and RG
export FZF_DEFAULT_COMMAND='rg --files'

# pyenv support (if installed)
if [ -d $HOME/.pyenv ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"

    if which pyenv-virtualenv-init > /dev/null 2>&1; then
        eval "$(pyenv virtualenv-init -)";
    fi
fi

# jenv support (if installed)
if [ -d $HOME/.jenv ]; then
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
elif [ -d /usr/lib/jvm/java-8-openjdk-amd64 ]; then
    export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
else
    # Test if Java installed. This works on Mac, which cannot just test for existance
    # of java or javac, as Mac includes a shim for each that prompts to install.
    /usr/libexec/java_home &> /dev/null
    if [ $? -eq 0 ]; then
        export JAVA_HOME=$(/usr/libexec/java_home)
        # TODO - add an else clause to handle other platforms
    fi
fi

# OpenCCG goofiness
if [ -d $HOME/git/openccg ]; then
    export OPENCCG_HOME=/Users/dsswishe/git/openccg
fi

# Docker stuff
if [ -f /usr/bin/docker ]; then
    # TODO - not sure how portable this is - seems to hurt more than it helps?
    # export DOCKER_HOST=tcp://127.0.0.1:2376;
    # export DOCKER_TLS_VERIFY=1
fi

if [ -d $HOME/.nvm ]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# Dotnet tools
if [ -d $HOME/.dotnet/tools ]; then
    export PATH="$PATH:$HOME/.dotnet/tools"
fi

# MySQL client, on Mac: brew install mysql-client
if [ -d /opt/homebrew/opt/mysql-client/bin ]; then
    export PATH="$PATH:/opt/homebrew/opt/mysql-client/bin"
elif [ -d /usr/local/opt/mysql-client/bin ]; then
    export PATH="$PATH:/usr/local/opt/mysql-client/bin"
fi


# Set up chruby, used to play with Jekyll on Mac
# if [ -d /opt/homebrew/opt/chruby/share/chruby ]; then
#     source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
#     source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
#     chruby ruby-3.1.3
# fi


# Host-specific hacks
HOST=`hostname`

if [[ "$HOST" = "C02Z32DYLVDR" || "$HOST" = "Q6GQCX1C96.local" || "$HOST" == "Q6GQCX1C96" || "$HOST" = "Smack.local" ]]; then
    export PS1="dj-mac: "

    alias feedgen='cd ~/git/rnc/feedgen'
    alias delivery='cd ~/git/rnc/delivery'
fi

if [ "$USER" = "ec2-user" ]; then
    export PS1="ec2: "
    if [ -f $HOME/.aws/credentials ]; then
        # This is a sign that tokendito is being used, which should only be in dev. The creds
        # are probably expired, so attempting use sts, below, will fail.
        export PS1="ec2-dev: "
    elif [ -x "$(command -v aws)" ] && [ -x "$(command -v jq)" ]; then
        # Per this page, a token is now required to get metadata: https://medium.com/@sumitkumar.it81/get-instance-metadata-in-amazon-linux-2023-al2023-e4bf0611d0ad
        ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        TOKEN=$(curl -s --request PUT "http://169.254.169.254/latest/api/token" --header "X-aws-ec2-metadata-token-ttl-seconds: 3600")
        AWS_INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id --header "X-aws-ec2-metadata-token: $TOKEN"`
        # TODO - pull the region from metadata or someplace?
        EC2_NAME=$(aws ec2 describe-tags --region us-east-1 --filters "Name=resource-id,Values=$AWS_INSTANCE_ID" "Name=key,Values=Name" --output text | cut -f5 | sed 's/^Adhoc-Instance-//')
        case $ACCOUNT in
        804996416271)
          export PS1="ec2-PROD-$EC2_NAME: "
          ;;
        785464502395)
          export PS1="ec2-stg-$EC2_NAME: "
          ;;
        880671340840)
          export PS1="ec2-dev-$EC2_NAME: "
          ;;
        esac
    fi
fi

# On EC2 instances, SHELL was set improperly. Fix that...
export SHELL=$(which zsh)

# Local host-specific stuff that shouldn't be in source control
if [ -f $HOME/.zshrc-local ]; then
    source $HOME/.zshrc-local
fi

# Completions, etc.
autoload -U compinit && compinit

# Set up zoxide - improved cd - uses "z" in the shell - see https://github.com/ajeetdsouza/zoxide
if [[ -f /opt/homebrew/bin/zoxide || -f ~/.local/bin/zoxide ]]; then
    export _ZO_ECHO=1
    if [ -f ~/.local/bin/zoxide ]; then
        export PATH="$PATH:$HOME/.local/bin"
    fi
    eval "$(zoxide init zsh)"
fi

# Fuzzy fun
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

