
# Based on https://dougblack.io/words/zsh-vi-mode.html
# and http://zanshin.net/2013/02/02/zsh-configuration-from-the-ground-up/

# Set up history file
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000

setopt hist_ignore_dups # Do not write events to history that are duplicates of previous events

# Set vi command-line editing mode
bindkey -v

# Have info use vi key bindings; an alias seems to be the only way
alias info='info --vi-keys'

# Enable highlighting in less
alias less='less -R'

# clear LSCOLORS
unset LSCOLORS

# make directories more visible on a dark background
export CLICOLOR=1
export LSCOLORS=Gxfxcxdxbxegedabagacad

# use vim whenever possible
if [ -f /usr/local/bin/vim ]; then
    export EDITOR=/usr/local/bin/vim
else
    export EDITOR=/usr/bin/vim
fi
export VISUAL="$EDITOR"
export GIT_EDITOR="$EDITOR"

# make sure we use vim
alias vi=$EDITOR

# ripgrep config
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# playing with GO; this is probably wrong...
if [ -d $HOME/GO ]; then
    export GOPATH=$HOME/GO
    export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"
fi

# my virtualenv wrapper
if [ -f $HOME/git/dothome/myvirtualenv.sh ]; then
    export VENV_DIR=~/VirtualEnvs
    source $HOME/git/dothome/myvirtualenv.sh
fi

# Put local bin in path
export PATH="$PATH:$HOME/bin"

# FZF and RG
export FZF_DEFAULT_COMMAND='rg --files'

# pyenv support (if installed)
if [ -d $HOME/.pyenv ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    eval "$(pyenv init -)"

    if which pyenv-virtualenv-init > /dev/null 2>&1; then
        eval "$(pyenv virtualenv-init -)";
    fi
fi

# jenv support (if installed)
if [ -d $HOME/.jenv ]; then
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
elif [ -d /usr/lib/jvm/java-8-openjdk-amd64 ]; then
    export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
else
    # Test if Java installed. This works on Mac, which cannot just test for existance
    # of java or javac, as Mac includes a shim for each that prompts to install.
    /usr/libexec/java_home &> /dev/null
    if [ $? -eq 0 ]; then
        export JAVA_HOME=$(/usr/libexec/java_home)
        # TODO - add an else clause to handle other platforms
    fi
fi

# OpenCCG goofiness
if [ -d $HOME/git/openccg ]; then
    export OPENCCG_HOME=/Users/dsswishe/git/openccg
fi

# Docker stuff
if [ -f /usr/bin/docker ]; then
    # TODO - not sure how portable this is - seems to hurt more than it helps?
    # export DOCKER_HOST=tcp://127.0.0.1:2376;
    # export DOCKER_TLS_VERIFY=1
fi

if [ -d $HOME/.nvm ]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# Homebrew tweaks (Mac only)
if [ -f /usr/local/bin/brew ]; then
    # Only update once per day
    export HOMEBREW_AUTO_UPDATE_SECS=86400
fi

# Use vifm to change directory
vicd()
{
    local dst="$(command vifm --choose-dir - "$@")"
    if [ -z "$dst" ]; then
        echo 'Directory picking cancelled/failed'
        return 1
    fi
    cd "$dst"
    pwd
}

# Fuzzy cd - fcd
unalias fcd 2> /dev/null
fcd() {
    local dest_dir=$($HOME/bin/fcd-pick.sh $1 )
    if [[ $dest_dir != '' ]]; then
        cd "$dest_dir"
        pwd
    fi
}

# Host-specific hacks
HOST=`hostname`

if [[ "$HOST" = "C02YN3R5JG5H.local" || "$HOST" = "C02Z32DYLVDR" ]]; then
    export PS1="dj-mac: "
fi

if [ "$USER" = "ec2-user" ]; then
    export PS1="ec2: "
    if [ -x "$(command -v aws)" ] && [ -x "$(command -v jq)" ]; then
        ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        case $ACCOUNT in
        804996416271)
          export PS1="ec2-PROD: "
          ;;
        785464502395)
          export PS1="ec2-stg: "
          ;;
        880671340840)
          export PS1="ec2-dev: "
          ;;
        esac
    fi
fi

# Local host-specific stuff that shouldn't be in source control
if [ -f $HOME/.zshrc-local ]; then
    source $HOME/.zshrc-local
fi

# Completions, etc.
autoload -U compinit && compinit

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
